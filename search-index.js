var searchIndex = {};
searchIndex['tozny_auth'] = {"items":[[0,"","tozny_auth","Library interface to the [Tozny authentication service][tozny].  The purpose\nof this SDK is to make it easy to add Tozny support to Rust apps.",null,null],[0,"login","","",null,null],[3,"Login","tozny_auth::login","Upon success authentication, the `user.check_session_status` API call will\nreturn a `Login` value.",null,null],[12,"user_id","","",0,null],[12,"session_id","","",0,null],[12,"realm_key_id","","",0,null],[12,"user_display","","",0,null],[12,"expires_at","","",0,null],[12,"signature_type","","",0,null],[11,"encode","","",0,{"inputs":[{"name":"login"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"login"},{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"login"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"protocol","tozny_auth","This module defines several types and provides some low-level functions.",null,null],[3,"Challenge","tozny_auth::protocol","",null,null],[3,"KeyId","","",null,null],[3,"Method","","",null,null],[3,"Presence","","",null,null],[3,"Secret","","",null,null],[3,"SessionId","","",null,null],[3,"SignatureType","","",null,null],[3,"UserId","","",null,null],[3,"Timestamp","","Wraps a `DateTime<UTC>` value; implements serialization into the format\nexpected by the Tozny API.",null,null],[5,"error_response","","Extracts error messages from a Tozny API response.",null,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[8,"Newtype","","Abstraction for a type wrapper around a generic type.",null,null],[10,"unwrap","","",1,{"inputs":[{"name":"newtype"}],"output":{"name":"t"}}],[10,"as_slice","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"challenge"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"challenge"}],"output":{"name":"challenge"}}],[11,"eq","","",2,{"inputs":[{"name":"challenge"},{"name":"challenge"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"challenge"},{"name":"challenge"}],"output":{"name":"bool"}}],[11,"new","","",2,{"inputs":[{"name":"challenge"},{"name":"string"}],"output":{"name":"challenge"}}],[11,"from_slice","","",2,{"inputs":[{"name":"challenge"},{"name":"str"}],"output":{"name":"challenge"}}],[11,"unwrap","","",2,{"inputs":[{"name":"challenge"}],"output":{"name":"string"}}],[11,"as_slice","","",2,{"inputs":[{"name":"challenge"}],"output":{"name":"str"}}],[11,"decode","","",2,{"inputs":[{"name":"challenge"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"challenge"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",2,{"inputs":[{"name":"challenge"}],"output":{"name":"json"}}],[11,"fmt","","",3,{"inputs":[{"name":"keyid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"keyid"}],"output":{"name":"keyid"}}],[11,"eq","","",3,{"inputs":[{"name":"keyid"},{"name":"keyid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"keyid"},{"name":"keyid"}],"output":{"name":"bool"}}],[11,"new","","",3,{"inputs":[{"name":"keyid"},{"name":"string"}],"output":{"name":"keyid"}}],[11,"from_slice","","",3,{"inputs":[{"name":"keyid"},{"name":"str"}],"output":{"name":"keyid"}}],[11,"unwrap","","",3,{"inputs":[{"name":"keyid"}],"output":{"name":"string"}}],[11,"as_slice","","",3,{"inputs":[{"name":"keyid"}],"output":{"name":"str"}}],[11,"decode","","",3,{"inputs":[{"name":"keyid"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"keyid"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",3,{"inputs":[{"name":"keyid"}],"output":{"name":"json"}}],[11,"fmt","","",4,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"eq","","",4,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"method"},{"name":"string"}],"output":{"name":"method"}}],[11,"from_slice","","",4,{"inputs":[{"name":"method"},{"name":"str"}],"output":{"name":"method"}}],[11,"unwrap","","",4,{"inputs":[{"name":"method"}],"output":{"name":"string"}}],[11,"as_slice","","",4,{"inputs":[{"name":"method"}],"output":{"name":"str"}}],[11,"decode","","",4,{"inputs":[{"name":"method"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"method"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",4,{"inputs":[{"name":"method"}],"output":{"name":"json"}}],[11,"fmt","","",5,{"inputs":[{"name":"presence"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"presence"}],"output":{"name":"presence"}}],[11,"eq","","",5,{"inputs":[{"name":"presence"},{"name":"presence"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"presence"},{"name":"presence"}],"output":{"name":"bool"}}],[11,"new","","",5,{"inputs":[{"name":"presence"},{"name":"string"}],"output":{"name":"presence"}}],[11,"from_slice","","",5,{"inputs":[{"name":"presence"},{"name":"str"}],"output":{"name":"presence"}}],[11,"unwrap","","",5,{"inputs":[{"name":"presence"}],"output":{"name":"string"}}],[11,"as_slice","","",5,{"inputs":[{"name":"presence"}],"output":{"name":"str"}}],[11,"decode","","",5,{"inputs":[{"name":"presence"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"presence"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",5,{"inputs":[{"name":"presence"}],"output":{"name":"json"}}],[11,"fmt","","",6,{"inputs":[{"name":"secret"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"secret"}],"output":{"name":"secret"}}],[11,"eq","","",6,{"inputs":[{"name":"secret"},{"name":"secret"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"secret"},{"name":"secret"}],"output":{"name":"bool"}}],[11,"new","","",6,{"inputs":[{"name":"secret"},{"name":"string"}],"output":{"name":"secret"}}],[11,"from_slice","","",6,{"inputs":[{"name":"secret"},{"name":"str"}],"output":{"name":"secret"}}],[11,"unwrap","","",6,{"inputs":[{"name":"secret"}],"output":{"name":"string"}}],[11,"as_slice","","",6,{"inputs":[{"name":"secret"}],"output":{"name":"str"}}],[11,"decode","","",6,{"inputs":[{"name":"secret"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"secret"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",6,{"inputs":[{"name":"secret"}],"output":{"name":"json"}}],[11,"fmt","","",7,{"inputs":[{"name":"sessionid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"sessionid"}],"output":{"name":"sessionid"}}],[11,"eq","","",7,{"inputs":[{"name":"sessionid"},{"name":"sessionid"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"sessionid"},{"name":"sessionid"}],"output":{"name":"bool"}}],[11,"new","","",7,{"inputs":[{"name":"sessionid"},{"name":"string"}],"output":{"name":"sessionid"}}],[11,"from_slice","","",7,{"inputs":[{"name":"sessionid"},{"name":"str"}],"output":{"name":"sessionid"}}],[11,"unwrap","","",7,{"inputs":[{"name":"sessionid"}],"output":{"name":"string"}}],[11,"as_slice","","",7,{"inputs":[{"name":"sessionid"}],"output":{"name":"str"}}],[11,"decode","","",7,{"inputs":[{"name":"sessionid"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"sessionid"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",7,{"inputs":[{"name":"sessionid"}],"output":{"name":"json"}}],[11,"fmt","","",8,{"inputs":[{"name":"signaturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"signaturetype"}],"output":{"name":"signaturetype"}}],[11,"eq","","",8,{"inputs":[{"name":"signaturetype"},{"name":"signaturetype"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"signaturetype"},{"name":"signaturetype"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"signaturetype"},{"name":"string"}],"output":{"name":"signaturetype"}}],[11,"from_slice","","",8,{"inputs":[{"name":"signaturetype"},{"name":"str"}],"output":{"name":"signaturetype"}}],[11,"unwrap","","",8,{"inputs":[{"name":"signaturetype"}],"output":{"name":"string"}}],[11,"as_slice","","",8,{"inputs":[{"name":"signaturetype"}],"output":{"name":"str"}}],[11,"decode","","",8,{"inputs":[{"name":"signaturetype"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"signaturetype"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",8,{"inputs":[{"name":"signaturetype"}],"output":{"name":"json"}}],[11,"fmt","","",9,{"inputs":[{"name":"userid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"userid"}],"output":{"name":"userid"}}],[11,"eq","","",9,{"inputs":[{"name":"userid"},{"name":"userid"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"userid"},{"name":"userid"}],"output":{"name":"bool"}}],[11,"new","","",9,{"inputs":[{"name":"userid"},{"name":"string"}],"output":{"name":"userid"}}],[11,"from_slice","","",9,{"inputs":[{"name":"userid"},{"name":"str"}],"output":{"name":"userid"}}],[11,"unwrap","","",9,{"inputs":[{"name":"userid"}],"output":{"name":"string"}}],[11,"as_slice","","",9,{"inputs":[{"name":"userid"}],"output":{"name":"str"}}],[11,"decode","","",9,{"inputs":[{"name":"userid"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"userid"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",9,{"inputs":[{"name":"userid"}],"output":{"name":"json"}}],[11,"fmt","","",10,{"inputs":[{"name":"timestamp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"timestamp"}],"output":{"name":"timestamp"}}],[11,"eq","","",10,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[{"name":"timestamp"},{"name":"datetime"}],"output":{"name":"timestamp"}}],[11,"unwrap","","",10,{"inputs":[{"name":"timestamp"}],"output":{"name":"datetime"}}],[11,"as_slice","","",10,{"inputs":[{"name":"timestamp"}],"output":{"name":"datetime"}}],[11,"decode","","",10,{"inputs":[{"name":"timestamp"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"timestamp"},{"name":"s"}],"output":{"name":"result"}}],[11,"to_json","","",10,{"inputs":[{"name":"timestamp"}],"output":{"name":"json"}}],[0,"question","tozny_auth","",null,null],[3,"Question","tozny_auth::question","Type representing a signed message.  The data in a `Question` is signed\nusing HMAC-SHA256.",null,null],[12,"signed_data","","",11,null],[12,"signature","","",11,null],[4,"QuestionError","","Enumerates the possible errors that may occur while signing a message,\nverifying the signature of a message, or transmitting a signed message to\nthe Tozny API.",null,null],[13,"DecoderError","","",12,null],[13,"EncoderError","","",12,null],[13,"ParserError","","",12,null],[13,"Base64Error","","",12,null],[13,"HttpError","","",12,null],[13,"IoError","","",12,null],[13,"Utf8Error","","",12,null],[13,"InvalidSignature","","",12,null],[13,"BadlyFormedResponse","","",12,null],[13,"ErrorResponse","","",12,null],[5,"unpack","","Unpacks a base64-encoded JSON value.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"send_request","","Low-level function to dispatch a `Question` to the Tozny API.",null,{"inputs":[{"name":"url"},{"name":"keyid"},{"name":"secret"},{"name":"method"},{"name":"object"}],"output":{"name":"result"}}],[5,"sign","","Produces a signature using HMAC-SHA256.",null,{"inputs":[{"name":"secret"},{"name":"str"}],"output":{"name":"macresult"}}],[5,"check_signature","","Verifies a signature using a constant-time comparison.",null,{"inputs":[{"name":"secret"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"translate_url","","Translates a `url::Url` value to a `hyper::Url` value.",null,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[5,"from_json","","Gets a value of a `Decodable` type out of a `Json` value.",null,{"inputs":[{"name":"json"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"question"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"question"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"question"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Constructs a message to send to the Tozny API.  The format value for\n`params` will vary depending on the choice of `method`.",11,{"inputs":[{"name":"question"},{"name":"keyid"},{"name":"secret"},{"name":"method"},{"name":"object"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"questionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"questionerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"realm","tozny_auth","High level methods for making realm-level API calls to the Tozny API.",null,null],[3,"Realm","tozny_auth::realm","Type representing a particular Tozny realm.",null,null],[11,"encode","","",13,{"inputs":[{"name":"realm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"realm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"realm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"realm"},{"name":"realm"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"realm"},{"name":"realm"}],"output":{"name":"bool"}}],[11,"new","","Creates a new realm interface.",13,{"inputs":[{"name":"realm"},{"name":"keyid"},{"name":"secret"},{"name":"url"}],"output":{"name":"realm"}}],[11,"raw_call","","Low-level method to make arbitrary realm-level API calls.",13,{"inputs":[{"name":"realm"},{"name":"method"},{"name":"object"}],"output":{"name":"result"}}],[11,"verify_login","","Given a response from the `check_session_status` call in UserApi,\nverifies that the response is signed by Tozny, and decodes a `Login`\nvalue.",13,{"inputs":[{"name":"realm"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"check_valid_login","","Checks whether a given session is valid for a given user.  This is an\nalternative to using `check_session_status` and `verify_login`.",13,{"inputs":[{"name":"realm"},{"name":"userid"},{"name":"sessionid"},{"name":"timestamp"}],"output":{"name":"result"}}],[11,"question_challenge","","",13,{"inputs":[{"name":"realm"},{"name":"a"},{"name":"option"}],"output":{"name":"result"}}],[11,"user_get","","Given a Tozny user id, retrieves additional information associated with\nthat user.",13,{"inputs":[{"name":"realm"},{"name":"userid"}],"output":{"name":"result"}}],[0,"user","tozny_auth","High level methods for making realm-level API calls to the Tozny API.",null,null],[3,"User","tozny_auth::user","Information associated with a Tozny user.  This struct should be expanded in\nthe future.",null,null],[12,"id","","",14,null],[12,"logins","","",14,null],[3,"LoginChallenge","","Result of `login_challenge` call.  Contains a number of values that are\nnecessary for an authentication flow.  A brief rundown:",null,null],[12,"challenge","","",15,null],[12,"realm_key_id","","",15,null],[12,"session_id","","",15,null],[12,"qr_url","","",15,null],[12,"mobile_url","","",15,null],[12,"created_at","","",15,null],[12,"presence","","",15,null],[3,"UserApi","","Interface for sending user-level API calls to Tozny.",null,null],[11,"encode","","",14,{"inputs":[{"name":"user"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"user"},{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"user"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"loginchallenge"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"loginchallenge"},{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"loginchallenge"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","It is necessary to provide a realm key id to identify a realm.  However\nthe corresponding secret is not required.  So this method can be called\nin an untrusted environment.",16,{"inputs":[{"name":"userapi"},{"name":"keyid"},{"name":"url"}],"output":{"name":"userapi"}}],[11,"raw_call","","Low-level method for sending arbitrary user-level API calls.",16,{"inputs":[{"name":"userapi"},{"name":"vec"}],"output":{"name":"result"}}],[11,"login_challenge","","Use this method to initiate a login.  See the documentation on\n`LoginChallenge` for some information on how to use the response.",16,{"inputs":[{"name":"userapi"}],"output":{"name":"result"}}],[11,"push","","Sends a push notification to a user's mobile device asking the user to\nsign in to something.",16,{"inputs":[{"name":"userapi"},{"name":"sessionid"},{"name":"presence"}],"output":{"name":"result"}}],[11,"check_session_status","","Returns a signed question that may be checked via the `Realm`\n`verify_login` method to verify an authenticated session (if the result\nis `Ok(Some(question))`.  If the result is `Ok(None)` that indicates\nthat the session is \"pending\" - the user has not yet confirmed the\nsession via the Tozny app.",16,{"inputs":[{"name":"userapi"},{"name":"sessionid"}],"output":{"name":"result"}}]],"paths":[[3,"Login"],[8,"Newtype"],[3,"Challenge"],[3,"KeyId"],[3,"Method"],[3,"Presence"],[3,"Secret"],[3,"SessionId"],[3,"SignatureType"],[3,"UserId"],[3,"Timestamp"],[3,"Question"],[4,"QuestionError"],[3,"Realm"],[3,"User"],[3,"LoginChallenge"],[3,"UserApi"]]};
initSearch(searchIndex);
